// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wechatUserFieldNames          = builder.RawFieldNames(&WechatUser{})
	wechatUserRows                = strings.Join(wechatUserFieldNames, ",")
	wechatUserRowsExpectAutoSet   = strings.Join(stringx.Remove(wechatUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	wechatUserRowsWithPlaceHolder = strings.Join(stringx.Remove(wechatUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheWechatUserIdPrefix = "cache:wechatUser:id:"
)

type (
	wechatUserModel interface {
		Insert(ctx context.Context, data *WechatUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WechatUser, error)
		Update(ctx context.Context, data *WechatUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWechatUserModel struct {
		sqlc.CachedConn
		table string
	}

	WechatUser struct {
		Id        int64     `db:"id"`
		User      string    `db:"user"`       // 微信客户的external_userid
		Nickname  string    `db:"nickname"`   // 微信昵称
		Avatar    string    `db:"avatar"`     // 微信头像
		Gender    int64     `db:"gender"`     // 性别
		Unionid   string    `db:"unionid"`    // unionid，需要绑定微信开发者帐号才能获取到
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
	}
)

func newWechatUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultWechatUserModel {
	return &defaultWechatUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`wechat_user`",
	}
}

func (m *defaultWechatUserModel) Delete(ctx context.Context, id int64) error {
	wechatUserIdKey := fmt.Sprintf("%s%v", cacheWechatUserIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, wechatUserIdKey)
	return err
}

func (m *defaultWechatUserModel) FindOne(ctx context.Context, id int64) (*WechatUser, error) {
	wechatUserIdKey := fmt.Sprintf("%s%v", cacheWechatUserIdPrefix, id)
	var resp WechatUser
	err := m.QueryRowCtx(ctx, &resp, wechatUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wechatUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWechatUserModel) Insert(ctx context.Context, data *WechatUser) (sql.Result, error) {
	wechatUserIdKey := fmt.Sprintf("%s%v", cacheWechatUserIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, wechatUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.User, data.Nickname, data.Avatar, data.Gender, data.Unionid)
	}, wechatUserIdKey)
	return ret, err
}

func (m *defaultWechatUserModel) Update(ctx context.Context, data *WechatUser) error {
	wechatUserIdKey := fmt.Sprintf("%s%v", cacheWechatUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, wechatUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.User, data.Nickname, data.Avatar, data.Gender, data.Unionid, data.Id)
	}, wechatUserIdKey)
	return err
}

func (m *defaultWechatUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheWechatUserIdPrefix, primary)
}

func (m *defaultWechatUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wechatUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWechatUserModel) tableName() string {
	return m.table
}
