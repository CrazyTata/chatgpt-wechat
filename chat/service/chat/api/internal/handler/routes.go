// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	"chat/service/chat/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/user/register",
					Handler: UserRegisterHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/login",
					Handler: UserLoginHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upload/article",
					Handler: UploadArticleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete/collection",
					Handler: DeleteCollectionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/prompt/set",
					Handler: SetPromptHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/prompt/list",
					Handler: ListPromptHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/download/chat/history",
					Handler: DownloadChatHistoryHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/tool/sync-wechat-user",
					Handler: SyncWechatUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/find-get-application-config",
					Handler: FindApplicationConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/get-application-config",
					Handler: GetApplicationConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/create-application-config",
					Handler: CreateApplicationConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/update-application-config",
					Handler: UpdateApplicationConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/delete-application-config",
					Handler: DeleteApplicationConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/delete-application-config-by-ids",
					Handler: DeleteApplicationConfigByIdsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/find-get-customer-config",
					Handler: FindCustomerConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/get-customer-config",
					Handler: GetCustomerConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/create-customer-config",
					Handler: CreateCustomerConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/update-customer-config",
					Handler: UpdateCustomerConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/delete-customer-config",
					Handler: DeleteCustomerConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/config/delete-customer-config-by-ids",
					Handler: DeleteCustomerConfigByIdsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg/get-chat",
					Handler: GetChatListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg/export",
					Handler: ChatExportHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/msg/push",
					Handler: ChatHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg/customer/push",
					Handler: CustomerChatHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg/last-chat-info",
					Handler: GetLastChatRecordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg/generate-chat",
					Handler: AutoChatHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api"),
	)
}
